import "helpers" as helpers; helpers::if_else(. % 2 == 0; . + 1; . * 2)
5
10

import "helpers" as helpers; helpers::if_else(. % 2 == 0; . + 1; . * 2)
4
5

import "helpers" as helpers; helpers::abs
42
42

import "helpers" as helpers; helpers::abs
-42
42

import "helpers" as helpers; map(helpers::filter_empty)
[ 42, [1, 2], false, {}, {"name": "john"}, [], "john", "", null ]
[ 42, [1, 2], false, {"name": "john"}, "john" ]

import "helpers" as helpers; helpers::is_close_to(274.9595015576324)
274.95950155763234
true

import "helpers" as helpers; helpers::is_close_to(274.9595017576324)
274.95950155763234
false

import "helpers" as helpers; helpers::approximate(1)
1.0000000000000002
1

import "helpers" as helpers; helpers::approximate(1.2)
1.0000000000000002
1.0000000000000002

import "helpers" as helpers; helpers::multiply
[]
1

import "helpers" as helpers; helpers::multiply
[42]
42

import "helpers" as helpers; helpers::multiply
[2, 3, 4]
24

import "helpers" as helpers; helpers::bigrams
[5, 7, 3, 0, 1, 5, 6]
[[5, 7], [7, 3], [3, 0], [0, 1], [1, 5], [5, 6]]

import "helpers" as helpers; try helpers::bigrams catch test("^Array .+ has less than 2 elements$")
[5]
true

import "helpers" as helpers; helpers::trigrams
[5, 7, 3, 0, 1, 5, 6]
[[5, 7, 3], [7, 3, 0], [3, 0, 1], [0, 1, 5], [1, 5, 6]]

import "helpers" as helpers; helpers::zip([4, 5, 6])
[1, 2, 3]
[ [1, 4], [2, 5], [3, 6] ]

import "helpers" as helpers; helpers::zip([4, 5, 6, 7, 8])
[1, 2, 3]
[ [1, 4], [2, 5], [3, 6], [7], [8] ]

import "helpers" as helpers; helpers::zip([4, 5, 6])
[1, 2, 3, 7, 8]
[ [1, 4], [2, 5], [3, 6], [7], [8] ]

import "helpers" as helpers; helpers::index
["one", "two", "three"]
[[0, "one"], [1, "two"], [2, "three"]]

import "helpers" as helpers; try helpers::trigrams catch test("^Array .+ has less than 3 elements$")
[5, 7]
true

import "helpers" as helpers; try helpers::count(. > 5)
[]
0

import "helpers" as helpers; try helpers::count(. > 5)
[1]
0

import "helpers" as helpers; try helpers::count(. > 5)
[1, 7, 6, 2]
2

import "helpers" as helpers; try helpers::rotate_left
[]
[]

import "helpers" as helpers; try helpers::rotate_left
[1]
[1]

import "helpers" as helpers; try helpers::rotate_left
[1, 2, 3, 4, 5]
[2, 3, 4, 5, 1]

import "helpers" as helpers; try helpers::set_by_index(0; 42)
[1, 2, 3, 4, 5, 6]
[42, 2, 3, 4, 5, 6]

import "helpers" as helpers; try helpers::set_by_index(3; 42)
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 42, 5, 6]

import "helpers" as helpers; try helpers::set_by_index(5; 42)
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 42]

import "helpers" as helpers; helpers::key_by("KEY_" + (. | tostring))
[5, 8, 9, 15]
{"KEY_5": 5, "KEY_8": 8, "KEY_9": 9, "KEY_15": 15}

import "helpers" as helpers; helpers::key_by(.id)
[ { "id": "a", "content": "Frodon" }, { "id": "b", "hobbit": "Bilbo" } ]
{ "a": {"id":"a","content":"Frodon"}, "b": {"id":"b","hobbit":"Bilbo"} }

import "helpers" as helpers; helpers::collapse_by(. % 2; max)
[]
[]

import "helpers" as helpers; helpers::collapse_by(. % 2; max)
[ 1, 2, 4, 5, 7, 14, 15, 21, 19, 16 ]
[ 1, 4, 7, 14, 21, 16 ]

import "helpers" as helpers; helpers::values
{ "a": 10, "b": 15 }
[10, 15]

import "helpers" as helpers; helpers::find_first(. % 2 == 0)
[ 7, 3, 2, 5, 4 ]
[ 2, 2 ]

import "helpers" as helpers; helpers::find_first(. > 10)
[ 7, 3, 2, 5, 4 ]
null

import "helpers" as helpers; helpers::cyclic_indexes(3)
[5, 7, 3, 0, 1, 5, 6]
[3, 4, 5, 6, 0, 1, 2]

import "helpers" as helpers; helpers::cyclic_indexes(0)
[5, 7, 3, 0, 1, 5, 6]
[0, 1, 2, 3, 4, 5, 6]

import "helpers" as helpers; helpers::cyclic_indexes(3; 2)
[5, 7, 3, 0, 1, 5, 6]
[3, 4, 5, 6, 0, 1, 2]

import "helpers" as helpers; helpers::extract(["a", "c"])
{ "a": 42, "b": "test", "c": ["one", "two"] }
[42, ["one", "two"]]

import "helpers" as helpers; helpers::extract([1, 4, 3])
[5, 7, 3, 0, 1, 5, 6]
[7, 1, 0]

import "helpers" as helpers; helpers::extract(["a", "z"])
{ "a": 42, "b": "test", "c": ["one", "two"] }
[42, null]

import "helpers" as helpers; helpers::extract([1, "a", 3])
[5, 7, 3, 0, 1, 5, 6]
[7, null, 0]

import "helpers" as helpers; helpers::partitioning_by(. % 2 == 0)
[5, 72, 3, 0, 1, 42, 6]
[[72, 0, 42, 6], [5, 3, 1]]

import "helpers" as helpers; helpers::times(0)
42
[]

import "helpers" as helpers; helpers::times(1)
42
[ 42 ]

import "helpers" as helpers; helpers::times(3)
42
[ 42, 42, 42 ]

import "helpers" as helpers; helpers::set_by_index(0; 1)
[ 0, 0, 0, 0, 0 ]
[ 1, 0, 0, 0, 0 ]

import "helpers" as helpers; helpers::set_by_index(2; 1)
[ 0, 0, 0, 0, 0 ]
[ 0, 0, 1, 0, 0 ]

import "helpers" as helpers; helpers::set_by_index(4; 1)
[ 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 1 ]

import "helpers" as helpers; helpers::set_by_index(5; 1)
[ 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 1 ]

import "helpers" as helpers; helpers::set_by_index(7; 1)
[ 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, null, null, 1 ]
